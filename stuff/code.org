
* Sort files and copy
Fick till ett script som gör det vi vill. Jag lyckades även träna modellen på datan, men sen kom jag inte längre. Håller på att lägger upp allt i https://github.com/friskgit/audio_classification

Jag åkte inte in till Västerås idag, men vi kanske kan höras lite kort efter lunch?

Script:

This script parses through the SCHAEFFER dataset and looks for the keywords in the variables keyA and keyB. It goes through the following steps:
1. clear the directories defined by dirA and dirB
2. loop through the directories in the SCHEAFFER set
3. loops through the json in each directory and parses it for keyA and keyB
4. copies over the found files to the respective directory in /Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/classification/training_data
5. closes open files

To find additional classifiers its easy to run the script with different key words. Beware of multi word keys which has not been tested.

#+begin_src shell :results output :dir "/Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/dataset/SCHAEFFER/" :tangle ../classification/import_data.sh
  #!/bin/bash
keyA=Impulse
keyB=Iteration
base="/Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/classification/training_data/"
dirA="$base""$keyA"
dirB="$base""$keyB"

echo "Clearing directories...\n\n"
rm -rf $dirB/*.wav
rm -rf $dirA/*.wav

echo "Copying files from dataset...\n\n"
for d in */; do
    for j in "$d"*.json; do
	if test -f "$j"
	then
	    if [[ "$(cat "$j" | jq '.object.labels.sustain')" == "\""$keyB"\"" ]]; then
		if [ ! -d "$dirB" ]; then
		    mkdir "$dirB"
		fi
		cp "$d""`cat "$j" | jq -r '.object.filename'`" "$dirB"
	    fi
	    if [[ "$(cat "$j" | jq '.object.labels."pulse-typology"')" == "\""$keyA"\"" ]]; then
		if [ ! -d "$dirA" ]; then
		    mkdir "$dirA"
		fi
		cp "$d""`cat "$j" | jq -r '.object.filename'`" "$dirA"
	    fi
	fi
    done
done

echo "Done!\n"
#+end_src

#+RESULTS:
: Clearing directories...\n\n
: Copying files from dataset...\n\n
: Done!\n
* Model
#+begin_src python :results output value :tangle /Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/classification/model.py
  import os
  import librosa
  import numpy as np
  import tensorflow as tf
  from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense
  from tensorflow.keras.models import Model
  from tensorflow.keras.optimizers import Adam
  from sklearn.model_selection import train_test_split
  from tensorflow.keras.utils import to_categorical
  from tensorflow.image import resize
  from tensorflow.keras.models import load_model

  # Define your folder structure
  data_dir = '/Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/classification/training_data'
  classes = ['Impulse', 'Iteration']

  # Load and preprocess audio data
  def load_and_preprocess_data(data_dir, classes, target_shape=(128, 128)):
      data = []
      labels = []
      
      for i, class_name in enumerate(classes):
          class_dir = os.path.join(data_dir, class_name)
          for filename in os.listdir(class_dir):
              if filename.endswith('.wav'):
                  file_path = os.path.join(class_dir, filename)
                  audio_data, sample_rate = librosa.load(file_path, sr=None)
                  # Perform preprocessing (e.g., convert to Mel spectrogram and resize)
                  mel_spectrogram = librosa.feature.melspectrogram(y=audio_data, sr=sample_rate)
                  mel_spectrogram = resize(np.expand_dims(mel_spectrogram, axis=-1), target_shape)
                  data.append(mel_spectrogram)
                  labels.append(i)
                  
      return np.array(data), np.array(labels)

  # Split data into training and testing sets
  data, labels = load_and_preprocess_data(data_dir, classes)
  labels = to_categorical(labels, num_classes=len(classes))  # Convert labels to one-hot encoding
  X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

  # Create a neural network model
  input_shape = X_train[0].shape
  input_layer = Input(shape=input_shape)
  x = Conv2D(32, (3, 3), activation='relu')(input_layer)
  x = MaxPooling2D((2, 2))(x)
  x = Conv2D(64, (3, 3), activation='relu')(x)
  x = MaxPooling2D((2, 2))(x)
  x = Flatten()(x)
  x = Dense(64, activation='relu')(x)
  output_layer = Dense(len(classes), activation='softmax')(x)
  model = Model(input_layer, output_layer)
#+end_src

#+RESULTS:
* Compiling the model
#+begin_src python :tangle /Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/classification/model.py
  model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])
#+end_src

* Training the model
#+begin_src python :tangle /Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/classification/model.py
  model.fit(X_train, y_train, epochs=200, batch_size=32, validation_data=(X_test, y_test))
#+end_src

* Model evaluation
#+begin_src python :tangle /Volumes/Freedom/Dropbox/Documents/kmh/forskning/applications/KK/KKS 2022 IRESAP/classification/model.py
  test_accuracy=model.evaluate(X_test,y_test,verbose=0)
  print(test_accuracy[1])
#+end_src
